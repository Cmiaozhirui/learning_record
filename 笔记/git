
=============*本地仓库*================
一、默认
git init 初始化
git add 添加到暂存区
git commit -m ‘’ 将暂存区里面的内容添加到历史区，也就是当前分支
git log 查看历史版本
git reset —hard commit_id(HEAD^) 回退到历史的某个版本
git log —pretty=oneline 以更简洁的方式查看历史版本
git reflog 查看之前的操作记录(不太理解，要好好的再理解下)
总结:
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
作业1.版本回退，以及到未来的某个版本去

二、版本回退
git checkout -- readme.txt 丢掉工作去的修改
***让文件在工作区的修改全部撤销*****,就是让这个文件回到最近一次git commit 或git add时的状态(—- 很重要啊，如果没有的话，就变成了切换分支，如果这个时候发现已经commit了，还没有push到远程，再回退，怎么办呢)
git reset HEAD file 丢掉暂存区的修改
可以把暂存区的修改撤销掉，重新回到工作去(比如我们把内容添加到暂存区了，想删掉暂存区的修改，就可以用这个命令回去)
git reset 命令既可以回到版本，也可以把暂存区的修改回到到工作区,但我们用HEAD时，表示最新的版本
总结:
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

三、删除
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
总结:
命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。























